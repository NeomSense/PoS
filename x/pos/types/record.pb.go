// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: pos/pos/v1/record.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RecordStatus defines the status of a record
type RecordStatus int32

const (
	RecordStatusUnspecified RecordStatus = 0
	RecordStatusPending     RecordStatus = 1
	RecordStatusVerified    RecordStatus = 2
	RecordStatusRejected    RecordStatus = 3
)

var RecordStatus_name = map[int32]string{
	0: "RECORD_STATUS_UNSPECIFIED",
	1: "RECORD_STATUS_PENDING",
	2: "RECORD_STATUS_VERIFIED",
	3: "RECORD_STATUS_REJECTED",
}

var RecordStatus_value = map[string]int32{
	"RECORD_STATUS_UNSPECIFIED": 0,
	"RECORD_STATUS_PENDING":     1,
	"RECORD_STATUS_VERIFIED":    2,
	"RECORD_STATUS_REJECTED":    3,
}

func (x RecordStatus) String() string {
	return proto.EnumName(RecordStatus_name, int32(x))
}

func (RecordStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c0857de429b972bc, []int{0}
}

// Record represents a proof-of-record submission by a validator
type Record struct {
	Id               string       `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	ValidatorAddress string       `protobuf:"bytes,2,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty" yaml:"validator_address"`
	Data             []byte       `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Timestamp        int64        `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Status           RecordStatus `protobuf:"varint,5,opt,name=status,proto3,enum=pos.pos.v1.RecordStatus" json:"status,omitempty"`
	MerkleRoot       string       `protobuf:"bytes,6,opt,name=merkle_root,json=merkleRoot,proto3" json:"merkle_root,omitempty" yaml:"merkle_root"`
	BlockHeight      uint64       `protobuf:"varint,7,opt,name=block_height,json=blockHeight,proto3" json:"block_height,omitempty"`
}

func (m *Record) Reset()         { *m = Record{} }
func (m *Record) String() string { return proto.CompactTextString(m) }
func (*Record) ProtoMessage()    {}
func (*Record) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0857de429b972bc, []int{0}
}
func (m *Record) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Record) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Record.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Record) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Record.Merge(m, src)
}
func (m *Record) XXX_Size() int {
	return m.Size()
}
func (m *Record) XXX_DiscardUnknown() {
	xxx_messageInfo_Record.DiscardUnknown(m)
}

var xxx_messageInfo_Record proto.InternalMessageInfo

func (m *Record) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *Record) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *Record) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Record) GetTimestamp() int64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Record) GetStatus() RecordStatus {
	if m != nil {
		return m.Status
	}
	return RecordStatusUnspecified
}

func (m *Record) GetMerkleRoot() string {
	if m != nil {
		return m.MerkleRoot
	}
	return ""
}

func (m *Record) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

// ValidatorRecordStats tracks record submission stats for a validator
type ValidatorRecordStats struct {
	ValidatorAddress       string `protobuf:"bytes,1,opt,name=validator_address,json=validatorAddress,proto3" json:"validator_address,omitempty" yaml:"validator_address"`
	TotalRecords           uint64 `protobuf:"varint,2,opt,name=total_records,json=totalRecords,proto3" json:"total_records,omitempty"`
	VerifiedRecords        uint64 `protobuf:"varint,3,opt,name=verified_records,json=verifiedRecords,proto3" json:"verified_records,omitempty"`
	RejectedRecords        uint64 `protobuf:"varint,4,opt,name=rejected_records,json=rejectedRecords,proto3" json:"rejected_records,omitempty"`
	LastRecordTime         int64  `protobuf:"varint,5,opt,name=last_record_time,json=lastRecordTime,proto3" json:"last_record_time,omitempty"`
	IsEligible             bool   `protobuf:"varint,6,opt,name=is_eligible,json=isEligible,proto3" json:"is_eligible,omitempty"`
	NextRequiredRecordTime int64  `protobuf:"varint,7,opt,name=next_required_record_time,json=nextRequiredRecordTime,proto3" json:"next_required_record_time,omitempty"`
}

func (m *ValidatorRecordStats) Reset()         { *m = ValidatorRecordStats{} }
func (m *ValidatorRecordStats) String() string { return proto.CompactTextString(m) }
func (*ValidatorRecordStats) ProtoMessage()    {}
func (*ValidatorRecordStats) Descriptor() ([]byte, []int) {
	return fileDescriptor_c0857de429b972bc, []int{1}
}
func (m *ValidatorRecordStats) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ValidatorRecordStats) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ValidatorRecordStats.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ValidatorRecordStats) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ValidatorRecordStats.Merge(m, src)
}
func (m *ValidatorRecordStats) XXX_Size() int {
	return m.Size()
}
func (m *ValidatorRecordStats) XXX_DiscardUnknown() {
	xxx_messageInfo_ValidatorRecordStats.DiscardUnknown(m)
}

var xxx_messageInfo_ValidatorRecordStats proto.InternalMessageInfo

func (m *ValidatorRecordStats) GetValidatorAddress() string {
	if m != nil {
		return m.ValidatorAddress
	}
	return ""
}

func (m *ValidatorRecordStats) GetTotalRecords() uint64 {
	if m != nil {
		return m.TotalRecords
	}
	return 0
}

func (m *ValidatorRecordStats) GetVerifiedRecords() uint64 {
	if m != nil {
		return m.VerifiedRecords
	}
	return 0
}

func (m *ValidatorRecordStats) GetRejectedRecords() uint64 {
	if m != nil {
		return m.RejectedRecords
	}
	return 0
}

func (m *ValidatorRecordStats) GetLastRecordTime() int64 {
	if m != nil {
		return m.LastRecordTime
	}
	return 0
}

func (m *ValidatorRecordStats) GetIsEligible() bool {
	if m != nil {
		return m.IsEligible
	}
	return false
}

func (m *ValidatorRecordStats) GetNextRequiredRecordTime() int64 {
	if m != nil {
		return m.NextRequiredRecordTime
	}
	return 0
}

func init() {
	proto.RegisterEnum("pos.pos.v1.RecordStatus", RecordStatus_name, RecordStatus_value)
	proto.RegisterType((*Record)(nil), "pos.pos.v1.Record")
	proto.RegisterType((*ValidatorRecordStats)(nil), "pos.pos.v1.ValidatorRecordStats")
}

func init() { proto.RegisterFile("pos/pos/v1/record.proto", fileDescriptor_c0857de429b972bc) }

var fileDescriptor_c0857de429b972bc = []byte{
	// 622 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xc1, 0x6e, 0xd3, 0x4c,
	0x10, 0xce, 0x26, 0xfe, 0xd3, 0xbf, 0xdb, 0x50, 0xd2, 0xa5, 0xb4, 0x6e, 0xa8, 0x1c, 0x13, 0x38,
	0x04, 0x0e, 0x31, 0x2d, 0x48, 0x88, 0x1e, 0x90, 0xda, 0xc6, 0x40, 0x38, 0x84, 0x68, 0x93, 0xf6,
	0xc0, 0xc5, 0x72, 0xe2, 0x25, 0x5d, 0x6a, 0x7b, 0x8d, 0x77, 0x1b, 0xb5, 0x6f, 0x80, 0x7a, 0xe2,
	0x05, 0x2a, 0x21, 0x71, 0xe2, 0x4d, 0x38, 0xf6, 0xc8, 0xa9, 0x42, 0xed, 0xa5, 0x47, 0xd4, 0x27,
	0x40, 0xde, 0x75, 0x1a, 0x57, 0xe1, 0xc4, 0x61, 0xad, 0xf1, 0x37, 0xdf, 0x37, 0x33, 0xfb, 0x8d,
	0x6c, 0xb8, 0x1c, 0x31, 0x6e, 0x25, 0x67, 0xb4, 0x66, 0xc5, 0x64, 0xc0, 0x62, 0xaf, 0x11, 0xc5,
	0x4c, 0x30, 0x04, 0x23, 0xc6, 0x1b, 0xc9, 0x19, 0xad, 0x55, 0x16, 0xdc, 0x80, 0x86, 0xcc, 0x92,
	0x4f, 0x95, 0xae, 0x2c, 0x0e, 0xd9, 0x90, 0xc9, 0xd0, 0x4a, 0x22, 0x85, 0xd6, 0xbe, 0xe7, 0x61,
	0x11, 0xcb, 0x2a, 0x68, 0x1e, 0xe6, 0xa9, 0xa7, 0x03, 0x13, 0xd4, 0x67, 0x71, 0x9e, 0x7a, 0xa8,
	0x05, 0x17, 0x46, 0xae, 0x4f, 0x3d, 0x57, 0xb0, 0xd8, 0x71, 0x3d, 0x2f, 0x26, 0x9c, 0xeb, 0xf9,
	0x24, 0xbd, 0xb5, 0x7a, 0x75, 0x56, 0xd5, 0x8f, 0xdc, 0xc0, 0xdf, 0xa8, 0x4d, 0x51, 0x6a, 0xb8,
	0x7c, 0x8d, 0x6d, 0x2a, 0x08, 0x21, 0xa8, 0x79, 0xae, 0x70, 0xf5, 0x82, 0x09, 0xea, 0x25, 0x2c,
	0x63, 0xb4, 0x0a, 0x67, 0x05, 0x0d, 0x08, 0x17, 0x6e, 0x10, 0xe9, 0x9a, 0x09, 0xea, 0x05, 0x3c,
	0x01, 0xd0, 0x13, 0x58, 0xe4, 0xc2, 0x15, 0x07, 0x5c, 0xff, 0xcf, 0x04, 0xf5, 0xf9, 0x75, 0xbd,
	0x31, 0xb9, 0x5d, 0x43, 0x0d, 0xdc, 0x95, 0x79, 0x9c, 0xf2, 0xd0, 0x73, 0x38, 0x17, 0x90, 0x78,
	0xdf, 0x27, 0x4e, 0xcc, 0x98, 0xd0, 0x8b, 0x72, 0xd0, 0xa5, 0xab, 0xb3, 0x2a, 0x52, 0x83, 0x66,
	0x92, 0x35, 0x0c, 0xd5, 0x1b, 0x66, 0x4c, 0xa0, 0xfb, 0xb0, 0xd4, 0xf7, 0xd9, 0x60, 0xdf, 0xd9,
	0x23, 0x74, 0xb8, 0x27, 0xf4, 0x19, 0x13, 0xd4, 0x35, 0x3c, 0x27, 0xb1, 0x37, 0x12, 0xda, 0xd0,
	0x2e, 0xbf, 0x56, 0x41, 0xed, 0x32, 0x0f, 0x17, 0x77, 0xc7, 0x57, 0x9b, 0xcc, 0xc0, 0xff, 0xee,
	0x14, 0xf8, 0x27, 0xa7, 0x1e, 0xc0, 0x5b, 0x82, 0x09, 0xd7, 0x77, 0xd4, 0x6a, 0x95, 0xe1, 0x1a,
	0x2e, 0x49, 0x50, 0xf5, 0xe4, 0xe8, 0x11, 0x2c, 0x8f, 0x48, 0x4c, 0x3f, 0x50, 0xe2, 0x5d, 0xf3,
	0x0a, 0x92, 0x77, 0x7b, 0x8c, 0x67, 0xa8, 0x31, 0xf9, 0x48, 0x06, 0x22, 0x43, 0xd5, 0x14, 0x75,
	0x8c, 0x8f, 0xa9, 0x75, 0x58, 0xf6, 0x5d, 0x2e, 0x52, 0x9a, 0x93, 0xec, 0x42, 0x9a, 0x5f, 0xc0,
	0xf3, 0x09, 0xae, 0x68, 0x3d, 0x1a, 0x10, 0x54, 0x85, 0x73, 0x94, 0x3b, 0xc4, 0xa7, 0x43, 0xda,
	0xf7, 0x89, 0xb4, 0xfa, 0x7f, 0x0c, 0x29, 0xb7, 0x53, 0x04, 0xbd, 0x80, 0x2b, 0x21, 0x39, 0x4c,
	0x4a, 0x7d, 0x3a, 0xa0, 0xf1, 0x75, 0x6b, 0x55, 0x73, 0x46, 0xd6, 0x5c, 0x4a, 0x08, 0x38, 0xcd,
	0x4f, 0x6a, 0x2b, 0xab, 0x1f, 0xff, 0x06, 0xb0, 0x94, 0xdd, 0x32, 0xda, 0x80, 0x2b, 0xd8, 0xde,
	0x7e, 0x87, 0x9b, 0x4e, 0xb7, 0xb7, 0xd9, 0xdb, 0xe9, 0x3a, 0x3b, 0xed, 0x6e, 0xc7, 0xde, 0x6e,
	0xbd, 0x6a, 0xd9, 0xcd, 0x72, 0xae, 0x72, 0xef, 0xf8, 0xc4, 0x5c, 0xce, 0x0a, 0x76, 0x42, 0x1e,
	0x91, 0x81, 0xb4, 0x02, 0xad, 0xc3, 0xbb, 0x37, 0xb5, 0x1d, 0xbb, 0xdd, 0x6c, 0xb5, 0x5f, 0x97,
	0x41, 0x65, 0xf9, 0xf8, 0xc4, 0xbc, 0x93, 0xd5, 0x75, 0x48, 0xe8, 0xd1, 0x70, 0x88, 0x9e, 0xc1,
	0xa5, 0x9b, 0x9a, 0x5d, 0x1b, 0xab, 0x66, 0xf9, 0x8a, 0x7e, 0x7c, 0x62, 0x2e, 0x66, 0x45, 0xbb,
	0xa9, 0xe9, 0xd3, 0x2a, 0x6c, 0xbf, 0xb5, 0xb7, 0x7b, 0x76, 0xb3, 0x5c, 0x98, 0x56, 0xe1, 0xd4,
	0xff, 0x8a, 0xf6, 0xf9, 0x9b, 0x91, 0xdb, 0x7a, 0xf9, 0xe3, 0xdc, 0x00, 0xa7, 0xe7, 0x06, 0xf8,
	0x75, 0x6e, 0x80, 0x2f, 0x17, 0x46, 0xee, 0xf4, 0xc2, 0xc8, 0xfd, 0xbc, 0x30, 0x72, 0xef, 0x1f,
	0x0e, 0xa9, 0xd8, 0x3b, 0xe8, 0x37, 0x06, 0x2c, 0xb0, 0xda, 0x84, 0x05, 0x5d, 0x12, 0x72, 0x62,
	0x75, 0x58, 0xd7, 0x3a, 0x94, 0x3f, 0x02, 0x71, 0x14, 0x11, 0xde, 0x2f, 0xca, 0x0f, 0xfa, 0xe9,
	0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xef, 0x98, 0x6c, 0xfd, 0x20, 0x04, 0x00, 0x00,
}

func (this *Record) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Record)
	if !ok {
		that2, ok := that.(Record)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.ValidatorAddress != that1.ValidatorAddress {
		return false
	}
	if !bytes.Equal(this.Data, that1.Data) {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if this.Status != that1.Status {
		return false
	}
	if this.MerkleRoot != that1.MerkleRoot {
		return false
	}
	if this.BlockHeight != that1.BlockHeight {
		return false
	}
	return true
}
func (this *ValidatorRecordStats) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ValidatorRecordStats)
	if !ok {
		that2, ok := that.(ValidatorRecordStats)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.ValidatorAddress != that1.ValidatorAddress {
		return false
	}
	if this.TotalRecords != that1.TotalRecords {
		return false
	}
	if this.VerifiedRecords != that1.VerifiedRecords {
		return false
	}
	if this.RejectedRecords != that1.RejectedRecords {
		return false
	}
	if this.LastRecordTime != that1.LastRecordTime {
		return false
	}
	if this.IsEligible != that1.IsEligible {
		return false
	}
	if this.NextRequiredRecordTime != that1.NextRequiredRecordTime {
		return false
	}
	return true
}
func (m *Record) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Record) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Record) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintRecord(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x38
	}
	if len(m.MerkleRoot) > 0 {
		i -= len(m.MerkleRoot)
		copy(dAtA[i:], m.MerkleRoot)
		i = encodeVarintRecord(dAtA, i, uint64(len(m.MerkleRoot)))
		i--
		dAtA[i] = 0x32
	}
	if m.Status != 0 {
		i = encodeVarintRecord(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x28
	}
	if m.Timestamp != 0 {
		i = encodeVarintRecord(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintRecord(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintRecord(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintRecord(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ValidatorRecordStats) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ValidatorRecordStats) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ValidatorRecordStats) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NextRequiredRecordTime != 0 {
		i = encodeVarintRecord(dAtA, i, uint64(m.NextRequiredRecordTime))
		i--
		dAtA[i] = 0x38
	}
	if m.IsEligible {
		i--
		if m.IsEligible {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x30
	}
	if m.LastRecordTime != 0 {
		i = encodeVarintRecord(dAtA, i, uint64(m.LastRecordTime))
		i--
		dAtA[i] = 0x28
	}
	if m.RejectedRecords != 0 {
		i = encodeVarintRecord(dAtA, i, uint64(m.RejectedRecords))
		i--
		dAtA[i] = 0x20
	}
	if m.VerifiedRecords != 0 {
		i = encodeVarintRecord(dAtA, i, uint64(m.VerifiedRecords))
		i--
		dAtA[i] = 0x18
	}
	if m.TotalRecords != 0 {
		i = encodeVarintRecord(dAtA, i, uint64(m.TotalRecords))
		i--
		dAtA[i] = 0x10
	}
	if len(m.ValidatorAddress) > 0 {
		i -= len(m.ValidatorAddress)
		copy(dAtA[i:], m.ValidatorAddress)
		i = encodeVarintRecord(dAtA, i, uint64(len(m.ValidatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRecord(dAtA []byte, offset int, v uint64) int {
	offset -= sovRecord(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Record) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovRecord(uint64(l))
	}
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovRecord(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovRecord(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovRecord(uint64(m.Timestamp))
	}
	if m.Status != 0 {
		n += 1 + sovRecord(uint64(m.Status))
	}
	l = len(m.MerkleRoot)
	if l > 0 {
		n += 1 + l + sovRecord(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovRecord(uint64(m.BlockHeight))
	}
	return n
}

func (m *ValidatorRecordStats) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ValidatorAddress)
	if l > 0 {
		n += 1 + l + sovRecord(uint64(l))
	}
	if m.TotalRecords != 0 {
		n += 1 + sovRecord(uint64(m.TotalRecords))
	}
	if m.VerifiedRecords != 0 {
		n += 1 + sovRecord(uint64(m.VerifiedRecords))
	}
	if m.RejectedRecords != 0 {
		n += 1 + sovRecord(uint64(m.RejectedRecords))
	}
	if m.LastRecordTime != 0 {
		n += 1 + sovRecord(uint64(m.LastRecordTime))
	}
	if m.IsEligible {
		n += 2
	}
	if m.NextRequiredRecordTime != 0 {
		n += 1 + sovRecord(uint64(m.NextRequiredRecordTime))
	}
	return n
}

func sovRecord(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRecord(x uint64) (n int) {
	return sovRecord(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Record) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Record: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Record: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= RecordStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MerkleRoot", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MerkleRoot = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ValidatorRecordStats) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ValidatorRecordStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ValidatorRecordStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRecord
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRecord
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalRecords", wireType)
			}
			m.TotalRecords = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalRecords |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field VerifiedRecords", wireType)
			}
			m.VerifiedRecords = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.VerifiedRecords |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RejectedRecords", wireType)
			}
			m.RejectedRecords = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RejectedRecords |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastRecordTime", wireType)
			}
			m.LastRecordTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastRecordTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEligible", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEligible = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NextRequiredRecordTime", wireType)
			}
			m.NextRequiredRecordTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NextRequiredRecordTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipRecord(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthRecord
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRecord(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRecord
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRecord
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRecord
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRecord
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRecord
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRecord        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRecord          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRecord = fmt.Errorf("proto: unexpected end of group")
)
